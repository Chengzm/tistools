/**
 * auto generated
 * Copyright (C) 2016 bronsp.com, All rights reserved.
 */
package org.tis.tools.model.po.ac;

import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Blob;
import java.sql.Time;
import java.util.Date;

import org.tis.tools.common.utils.StringUtil;

/**
 * 
 * <pre>
 * 实体
 * 模型文件 ： E:\github\soft\tistools\tistools\tools-core-basic\model\ABF-mysql.erm
 * 业务域：ac
 * 模型：AC_ENTITY 实体
 *
 * 数据实体定义表
 *
 * </pre>
 * @author generated by tools:gen-dao
 *
 */
public class AcEntity implements Serializable {

 	/** serialVersionUID */
	private static final long serialVersionUID = 1L;
	
	/** 对应的数据库表名称 */
	public static final String TABLE_NAME = "AC_ENTITY" ; 
	/* AC_ENTITY table's columns definition */
	/** GUID ：数据主键<br/><br/>全局唯一标识符（GUID，Globally Unique Identifier），系统自动生成； */
	public static final String COLUMN_GUID = "guid" ; 
	/** GUID_APP ：隶属应用GUID<br/><br/> */
	public static final String COLUMN_GUID_APP = "guid_app" ; 
	/** ENTITY_NAME ：实体名称<br/><br/> */
	public static final String COLUMN_ENTITY_NAME = "entity_name" ; 
	/** TABLE_NAME ：数据库表名<br/><br/> */
	public static final String COLUMN_TABLE_NAME = "table_name" ; 
	/** ENTITY_DESC ：实体描述<br/><br/> */
	public static final String COLUMN_ENTITY_DESC = "entity_desc" ; 
	/** DISPLAY_ORDER ：顺序<br/><br/> */
	public static final String COLUMN_DISPLAY_ORDER = "display_order" ; 
	/** ENTITY_TYPE ：实体类型<br/><br/>取值来自业务字典：DICT_AC_ENTITYTYPE 0-表 1-视图 2-查询实体 3-内存对象（系统运行时才存在） */
	public static final String COLUMN_ENTITY_TYPE = "entity_type" ; 
	/** ISADD ：是否可增加<br/><br/>取值来自业务菜单： DICT_YON */
	public static final String COLUMN_ISADD = "isadd" ; 
	/** ISDEL ：是否可删除<br/><br/>取值来自业务菜单： DICT_YON */
	public static final String COLUMN_ISDEL = "isdel" ; 
	/** ISMODIFY ：可修改<br/><br/>取值来自业务菜单： DICT_YON */
	public static final String COLUMN_ISMODIFY = "ismodify" ; 
	/** ISVIEW ：可查看<br/><br/>取值来自业务菜单： DICT_YON */
	public static final String COLUMN_ISVIEW = "isview" ; 
	/** ISPAGE ：是否需要分页显示<br/><br/>取值来自业务菜单： DICT_YON */
	public static final String COLUMN_ISPAGE = "ispage" ; 
	/** PAGE_LEN ：每页记录数<br/><br/> */
	public static final String COLUMN_PAGE_LEN = "page_len" ; 
	/** CHECK_REF ：删除记录检查引用关系<br/><br/>根据引用关系定义，检查关联记录是否需要同步删除； 引用关系定义格式： table.column/[Y/N];table.column/[Y/N];... 举例： 假如，存在实体acct，且引用关系定义如下 guid:tws_abc.acct_guid/Y;tws_nnn.acctid/N; 当前删除acct实体guid＝9988的记录，系统自动执行引用关系删除，逻辑如下： 查找tws_abc 表，acct_guid = 9988 的记录，并删除； 查找tws_nnn 表，acctid=9988的记录，但不删除； 如果采用系统默认的命名方式，规则可以简化为： guid:tws_abc/Y;tws_nnn/N; 则 查找tws_abc 表，acct_guid = 9988 的记录，并删除； 查找tws_nnn 表，acct_guid = 9988 的记录，但不删除； 前提，必须基于实体的GUID进行引用。 */
	public static final String COLUMN_CHECK_REF = "check_ref" ; 
	
	
	/** 字段类型：varchar<br/>字段名：数据主键<br/>描述：全局唯一标识符（GUID，Globally Unique Identifier），系统自动生成； */
	private String guid ;
	
	/** 字段类型：varchar<br/>字段名：隶属应用GUID<br/>描述： */
	private String guidApp ;
	
	/** 字段类型：varchar<br/>字段名：实体名称<br/>描述： */
	private String entityName ;
	
	/** 字段类型：varchar<br/>字段名：数据库表名<br/>描述： */
	private String tableName ;
	
	/** 字段类型：varchar<br/>字段名：实体描述<br/>描述： */
	private String entityDesc ;
	
	/** 字段类型：decimal<br/>字段名：顺序<br/>描述： */
	private BigDecimal displayOrder ;
	
	/** 字段类型：varchar<br/>字段名：实体类型<br/>描述：取值来自业务字典：DICT_AC_ENTITYTYPE 0-表 1-视图 2-查询实体 3-内存对象（系统运行时才存在） */
	private String entityType ;
	
	/** 字段类型：char<br/>字段名：是否可增加<br/>描述：取值来自业务菜单： DICT_YON */
	private String isadd ;
	
	/** 字段类型：char<br/>字段名：是否可删除<br/>描述：取值来自业务菜单： DICT_YON */
	private String isdel ;
	
	/** 字段类型：char<br/>字段名：可修改<br/>描述：取值来自业务菜单： DICT_YON */
	private String ismodify ;
	
	/** 字段类型：char<br/>字段名：可查看<br/>描述：取值来自业务菜单： DICT_YON */
	private String isview ;
	
	/** 字段类型：char<br/>字段名：是否需要分页显示<br/>描述：取值来自业务菜单： DICT_YON */
	private String ispage ;
	
	/** 字段类型：decimal<br/>字段名：每页记录数<br/>描述： */
	private BigDecimal pageLen ;
	
	/** 字段类型：varchar<br/>字段名：删除记录检查引用关系<br/>描述：根据引用关系定义，检查关联记录是否需要同步删除； 引用关系定义格式： table.column/[Y/N];table.column/[Y/N];... 举例： 假如，存在实体acct，且引用关系定义如下 guid:tws_abc.acct_guid/Y;tws_nnn.acctid/N; 当前删除acct实体guid＝9988的记录，系统自动执行引用关系删除，逻辑如下： 查找tws_abc 表，acct_guid = 9988 的记录，并删除； 查找tws_nnn 表，acctid=9988的记录，但不删除； 如果采用系统默认的命名方式，规则可以简化为： guid:tws_abc/Y;tws_nnn/N; 则 查找tws_abc 表，acct_guid = 9988 的记录，并删除； 查找tws_nnn 表，acct_guid = 9988 的记录，但不删除； 前提，必须基于实体的GUID进行引用。 */
	private String checkRef ;
	
	
	/**
	 * Set the 数据主键.
	 * 
	 * @param guid
	 *            数据主键
	 */
	public void setGuid(String guid) {
 		this.guid = guid == null ? null : guid.trim() ;
    }
    
    /**
	 * Get the 数据主键.
	 * 
	 * @return 数据主键
	 */
	public String getGuid(){
		return this.guid ;
    }
	
	/**
	 * Set the 隶属应用GUID.
	 * 
	 * @param guidApp
	 *            隶属应用GUID
	 */
	public void setGuidApp(String guidApp) {
 		this.guidApp = guidApp == null ? null : guidApp.trim() ;
    }
    
    /**
	 * Get the 隶属应用GUID.
	 * 
	 * @return 隶属应用GUID
	 */
	public String getGuidApp(){
		return this.guidApp ;
    }
	
	/**
	 * Set the 实体名称.
	 * 
	 * @param entityName
	 *            实体名称
	 */
	public void setEntityName(String entityName) {
 		this.entityName = entityName == null ? null : entityName.trim() ;
    }
    
    /**
	 * Get the 实体名称.
	 * 
	 * @return 实体名称
	 */
	public String getEntityName(){
		return this.entityName ;
    }
	
	/**
	 * Set the 数据库表名.
	 * 
	 * @param tableName
	 *            数据库表名
	 */
	public void setTableName(String tableName) {
 		this.tableName = tableName == null ? null : tableName.trim() ;
    }
    
    /**
	 * Get the 数据库表名.
	 * 
	 * @return 数据库表名
	 */
	public String getTableName(){
		return this.tableName ;
    }
	
	/**
	 * Set the 实体描述.
	 * 
	 * @param entityDesc
	 *            实体描述
	 */
	public void setEntityDesc(String entityDesc) {
 		this.entityDesc = entityDesc == null ? null : entityDesc.trim() ;
    }
    
    /**
	 * Get the 实体描述.
	 * 
	 * @return 实体描述
	 */
	public String getEntityDesc(){
		return this.entityDesc ;
    }
	
	/**
	 * Set the 顺序.
	 * 
	 * @param displayOrder
	 *            顺序
	 */
	public void setDisplayOrder(BigDecimal displayOrder) {
 		this.displayOrder = displayOrder ;
    }
    
    /**
	 * Get the 顺序.
	 * 
	 * @return 顺序，如果setDisplayOrder时原值为空，返回BigDecimal(0d)
	 */
	public BigDecimal getDisplayOrder(){
		if(displayOrder==null){
			return new BigDecimal(0d);
		}
		return displayOrder;
    }
	
	/**
	 * Set the 实体类型.
	 * 
	 * @param entityType
	 *            实体类型
	 */
	public void setEntityType(String entityType) {
 		this.entityType = entityType == null ? null : entityType.trim() ;
    }
    
    /**
	 * Get the 实体类型.
	 * 
	 * @return 实体类型
	 */
	public String getEntityType(){
		return this.entityType ;
    }
	
	/**
	 * Set the 是否可增加.
	 * 
	 * @param isadd
	 *            是否可增加
	 */
	public void setIsadd(String isadd) {
 		this.isadd = isadd == null ? null : isadd.trim() ;
    }
    
    /**
	 * Get the 是否可增加.
	 * 
	 * @return 是否可增加
	 */
	public String getIsadd(){
		return this.isadd ;
    }
	
	/**
	 * Set the 是否可删除.
	 * 
	 * @param isdel
	 *            是否可删除
	 */
	public void setIsdel(String isdel) {
 		this.isdel = isdel == null ? null : isdel.trim() ;
    }
    
    /**
	 * Get the 是否可删除.
	 * 
	 * @return 是否可删除
	 */
	public String getIsdel(){
		return this.isdel ;
    }
	
	/**
	 * Set the 可修改.
	 * 
	 * @param ismodify
	 *            可修改
	 */
	public void setIsmodify(String ismodify) {
 		this.ismodify = ismodify == null ? null : ismodify.trim() ;
    }
    
    /**
	 * Get the 可修改.
	 * 
	 * @return 可修改
	 */
	public String getIsmodify(){
		return this.ismodify ;
    }
	
	/**
	 * Set the 可查看.
	 * 
	 * @param isview
	 *            可查看
	 */
	public void setIsview(String isview) {
 		this.isview = isview == null ? null : isview.trim() ;
    }
    
    /**
	 * Get the 可查看.
	 * 
	 * @return 可查看
	 */
	public String getIsview(){
		return this.isview ;
    }
	
	/**
	 * Set the 是否需要分页显示.
	 * 
	 * @param ispage
	 *            是否需要分页显示
	 */
	public void setIspage(String ispage) {
 		this.ispage = ispage == null ? null : ispage.trim() ;
    }
    
    /**
	 * Get the 是否需要分页显示.
	 * 
	 * @return 是否需要分页显示
	 */
	public String getIspage(){
		return this.ispage ;
    }
	
	/**
	 * Set the 每页记录数.
	 * 
	 * @param pageLen
	 *            每页记录数
	 */
	public void setPageLen(BigDecimal pageLen) {
 		this.pageLen = pageLen ;
    }
    
    /**
	 * Get the 每页记录数.
	 * 
	 * @return 每页记录数，如果setPageLen时原值为空，返回BigDecimal(0d)
	 */
	public BigDecimal getPageLen(){
		if(pageLen==null){
			return new BigDecimal(0d);
		}
		return pageLen;
    }
	
	/**
	 * Set the 删除记录检查引用关系.
	 * 
	 * @param checkRef
	 *            删除记录检查引用关系
	 */
	public void setCheckRef(String checkRef) {
 		this.checkRef = checkRef == null ? null : checkRef.trim() ;
    }
    
    /**
	 * Get the 删除记录检查引用关系.
	 * 
	 * @return 删除记录检查引用关系
	 */
	public String getCheckRef(){
		return this.checkRef ;
    }
	
	public String toString(){
		return StringUtil.toString(this) ; 
	}
}