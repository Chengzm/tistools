/**
 * 
 */
package org.tis.tools.rservice.txmodel.override;

/**
 * 交易授权方式
 * 
 * @author megapro
 *
 */
public enum OverrideTypeEnum {

	/**
	 * 本地授权（本地同步）:</br>
	 * 在当前操作台（有可能是柜面、超柜、移动柜面等）上弹出授权提示框，</br>
	 * 当授权员输入有效的授权凭据并提交验证通过后，可继续后续交易操作；</br>
	 */
	LOCAL("本地授权"),
	
	/**
	 * 临柜同步授权（两个作台）:</br>
	 * 在临近操作台（有可能是柜面、超柜、移动柜面等）上弹出授权提示框，如：实习柜台，主管工作站授权</br>
	 * 原交易办理柜台进入同步等待,（同步）</br>
	 * 当授权员输入有效的授权凭据并提交验证通过后，授权柜台结束授权操作.</br>
	 * 交易办理柜台才能继续后续交易操作；</br>
	 */
	BY_SIDE_SYNC("临柜同步授权"),
	
	/**
	 * 临柜异步授权（两个工作台）:</br>
	 * 在临近操作台（有可能是柜面、超柜、移动柜面等）上弹出授权提示框，如：实习柜台，主管工作站授权</br>
	 * 原交易办理柜台可结束当前交易操作,转办其他业务操作,（异步）</br>
	 * 当授权员输入有效的授权凭据并提交验证通过后，授权柜台结束授权操作.</br>
	 * 交易办理柜台接收到授权结果通知后可继续后续交易操作；</br>
	 * 原交易办理柜台可可借助“通知、回查”等方式获取异步授权结果.</br>
	 */
	BY_SIDE_ASYNC("临柜异步授权"),

	/**
	 * 跨网点同步授权（两个网点）</br>
	 * 在其他网点的操作台（有可能是柜面、超柜、移动柜面等）上弹出授权提示框，如：支行交易，总行网点授权</br>
	 * 原交易办理柜台进入同步等待,（同步）</br>
	 * 当授权员输入有效的授权凭据并提交验证通过后，授权柜台结束授权操作.</br>
	 * 原交易办理柜台结束同步等待，可继续后续交易操作；</br>
	 */
	ACROSS_SYNC("跨网点同步授权") ,
	
	/**
	 * 跨网点异步授权（两个网点）
	 * 在其他网点的操作台（有可能是柜面、超柜、移动柜面等）上弹出授权提示框，如：支行交易，总行网点授权</br>
	 * 原交易办理柜台可结束当前交易操作,转办其他业务操作（异步）,</br>
	 * 当授权员输入有效的授权凭据并提交验证通过后，授权柜台结束授权操作.</br>
	 * 交易办理柜台接收到授权结果通知后可继续后续交易操作；</br>
	 * 原交易办理柜台可可借助“通知、回查”等方式获取异步授权结果.</br>
	 */
	ACROSS_ASYNC("跨网点异步授权") ,
	
	/**
	 * 远程同步授权（两个系统）
	 * 发生交易操作时，由外系统进行授权操作（一般是集中任务中心），如：支行交易，后台集中账务中心授权</br>
	 * 原交易办理柜台进入同步等待,（同步）</br>
	 * 当集中账务中心授权员通过后，返回授权结果.</br>
	 * 原交易办理柜台结束同步等待，可继续后续交易操作；</br>
	 */
	REMOTE_SYNC("远程同步授权") ,
	
	/**
	 * 远程异步授权（两个系统）
	 * 发生交易操作时，由外系统进行授权操作（一般是集中任务中心），如：支行交易，后台集中账务中心授权</br>
	 * 原交易办理柜台可结束当前交易操作,转办其他业务操作（异步）,</br>
	 * 当集中账务中心授权员通过后，返回授权结果.</br>
	 * 交易办理柜台接收到授权结果通知后可继续后续交易操作；</br>
	 * 原交易办理柜台可可借助“通知、回查”等方式获取异步授权结果.</br>
	 */
	REMOTE_ASYNC("远程异步授权") ; 
	
	private String desc = null;

	OverrideTypeEnum(String desc) {
		this.desc = desc;
	}

	public String getDesc() {
		return this.desc;
	}

	public String toString() {
		return this.name() + ":" + getDesc();
	}
}
