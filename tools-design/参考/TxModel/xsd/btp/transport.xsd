<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="http://www.primeton.com/btp/cfg" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.primeton.com/btp/cfg" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:include schemaLocation="common.xsd"/>
	<xs:simpleType name="TransportTcpModeType">
		<xs:annotation>
			<xs:documentation>TCP渠道的模式(包括单工,双工,半双工)</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="SIMPLEX"/>
			<xs:enumeration value="HALF_DUPLEX"/>
			<xs:enumeration value="DUPLEX"/>
		</xs:restriction>
	</xs:simpleType>
	<!--
	<xs:element name="transport-after-received-interceptors">
		<xs:annotation>
			<xs:documentation>收到数据之后拦截器链</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence maxOccurs="unbounded">
				<xs:element name="interceptor" type="xs:string">
					<xs:annotation>
						<xs:documentation>拦截器实现类</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="transport-before-send-interceptors">
		<xs:annotation>
			<xs:documentation>发送数据拦截器链</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence maxOccurs="unbounded">
				<xs:element name="interceptor" type="xs:string">
					<xs:annotation>
						<xs:documentation>拦截器实现类</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	-->
	<xs:element name="transport-http">
		<xs:annotation>
			<xs:documentation>HTTP渠道定义</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="name" type="xs:string">
					<xs:annotation>
						<xs:documentation>渠道名称</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="description" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>渠道描述</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="host" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>[V]绑定的主机名</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="port" type="xs:string">
					<xs:annotation>
						<xs:documentation>[V]绑定的对口号, (1024 - 65535)</xs:documentation>
					</xs:annotation>
				</xs:element>
				<!--
				<xs:element name="so-timeout" type="xs:int" default="30" minOccurs="0">
					<xs:annotation>
						<xs:documentation>设置读超时,单位:秒, 小于等于0 表示无超时</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="reuse-address" type="xs:boolean" default="false" minOccurs="0">
					<xs:annotation>
						<xs:documentation>启用/禁用 SO_REUSEADDR 套接字选项</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="send-buffer-size" type="xs:int" default="1024" minOccurs="0">
					<xs:annotation>
						<xs:documentation>设置发送缓冲大小</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="receive-buffer-size" type="xs:int" default="1024" minOccurs="0">
					<xs:annotation>
						<xs:documentation>设置接收缓冲大小</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="tcp-no-delay" type="xs:boolean" default="false" minOccurs="0">
					<xs:annotation>
						<xs:documentation>关闭Nagle算法.立即发包 </xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="keep-alive" type="xs:boolean" default="false" minOccurs="0">
					<xs:annotation>
						<xs:documentation>为 TCP 套接字设置 keepalive 选项时，如果在 2 个小时（注：实际值与实现有关）内在任意方向上都没有跨越套接字交换数据，则 TCP 会自动将 keepalive 探头发送到同位体</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="so-linger" type="xs:int" default="-1" minOccurs="0">
					<xs:annotation>
						<xs:documentation>指定关闭时逗留的超时值,单位:秒</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ssc-backlog" type="xs:int" default="50" minOccurs="0">
					<xs:annotation>
						<xs:documentation>接受请求连接的缓冲大小</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ssc-reuse-adddress" type="xs:boolean" default="true" minOccurs="0">
					<xs:annotation>
						<xs:documentation>启用/禁用 SO_REUSEADDR 套接字选项</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ssc-receive-buffer-size" type="xs:int" default="1024" minOccurs="0">
					<xs:annotation>
						<xs:documentation>为从此 ServerSocket 接受的套接字的 SO_RCVBUF 选项设置默认建议值</xs:documentation>
					</xs:annotation>
				</xs:element>
				-->
				<xs:element name="context" type="xs:string">
					<xs:annotation>
						<xs:documentation>上下文,多个之间用','分割,默认是'/'</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="protocol-type" type="xs:string">
					<xs:annotation>
						<xs:documentation>Http协议类型：
http/https</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="data-exchange-class" type="xs:string">
					<xs:annotation>
						<xs:documentation>提供两个默认数据转换实现：
InputStream实现
Paramter实现
接口：IHttpDataExchange</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="transport-request-creator" type="xs:string">
					<xs:annotation>
						<xs:documentation>需要修改为只获取渠道服务码和渠道服务解包的数据，需要能够拿到渠道定义,实现接口com.primeton.btp.api.transport.ITransportRequestCreator，默认值 com.primeton.btp.spi.transport.http.HttpTransportRequestCreator</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="transport-request-handler">
					<xs:annotation>
						<xs:documentation>渠道处理器,负责处理真正的业务数据请求，并返回处理结果,factory-class实现接口com.primeton.btp.api.transport.ITransportRequestHandlerFactory，默认值 com.primeton.btp.spi.transport.DefaultTransportRequestHandlerFactory





扩展属性说明（jetty的扩展属性放在ext中）
<element name="jetty-executor">
								<complexType>
									<sequence>
										<element name="maxIdleTime" type="int"/>
										<element name="acceptors" type="int"/>
										<element name="blocking" type="boolean"/>
										<element name="lowResourcesMaxIdleTime" type="int"/>
										<element name="lowResourcesConnections" type="int"/>
										<element name="poolMinThreads" type="int"/>
										<element name="poolMaxThreads" type="int"/>
									</sequence>
									<attribute name="id" type="ID"/>
									<attribute name="parentId" type="string"/>
									<attribute name="processorClassName" type="string"/>
									<attribute name="enable" type="boolean"/>
								</complexType>
							</element>
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:group ref="object-pool-group"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<!--
				<xs:element ref="transport-after-received-interceptors" minOccurs="0"/>
				<xs:element ref="transport-before-send-interceptors" minOccurs="0"/>
				-->
				<xs:element ref="ext-property" minOccurs="0"/>
				<xs:element name="ext-class" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>扩展实现类,实现接口com.primeton.btp.api.transport.http.IHttpTransport</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:all>
			<xs:attribute name="id" type="xs:string" use="required">
				<xs:annotation>
					<xs:documentation>渠道的唯一标识</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="transport-tcp">
		<xs:annotation>
			<xs:documentation>TCP渠道定义</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="name" type="xs:string">
					<xs:annotation>
						<xs:documentation>渠道名称</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="mode" type="TransportTcpModeType">
					<xs:annotation>
						<xs:documentation>TCP渠道的模式(如:单工,半双工,双工)</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="description" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>渠道描述</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="host" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>[V]绑定的主机名</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="port" type="xs:string">
					<xs:annotation>
						<xs:documentation>[V]绑定的对口号, (1024 - 65535)</xs:documentation>
					</xs:annotation>
				</xs:element>
				<!--
				<xs:element name="so-timeout" type="xs:int" default="30" minOccurs="0">
					<xs:annotation>
						<xs:documentation>设置读超时,单位:秒, 小于等于0 表示无超时</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="reuse-address" type="xs:boolean" default="false" minOccurs="0">
					<xs:annotation>
						<xs:documentation>启用/禁用 SO_REUSEADDR 套接字选项</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="send-buffer-size" type="xs:int" default="1024" minOccurs="0">
					<xs:annotation>
						<xs:documentation>设置发送缓冲大小</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="receive-buffer-size" type="xs:int" default="1024" minOccurs="0">
					<xs:annotation>
						<xs:documentation>设置接收缓冲大小</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="tcp-no-delay" type="xs:boolean" default="false" minOccurs="0">
					<xs:annotation>
						<xs:documentation>关闭Nagle算法.立即发包 </xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="keep-alive" type="xs:boolean" default="false" minOccurs="0">
					<xs:annotation>
						<xs:documentation>为 TCP 套接字设置 keepalive 选项时，如果在 2 个小时（注：实际值与实现有关）内在任意方向上都没有跨越套接字交换数据，则 TCP 会自动将 keepalive 探头发送到同位体</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="so-linger" type="xs:int" default="-1" minOccurs="0">
					<xs:annotation>
						<xs:documentation>指定关闭时逗留的超时值,单位:秒</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ssc-backlog" type="xs:int" default="50" minOccurs="0">
					<xs:annotation>
						<xs:documentation>接受请求连接的缓冲大小</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ssc-reuse-adddress" type="xs:boolean" default="true" minOccurs="0">
					<xs:annotation>
						<xs:documentation>启用/禁用 SO_REUSEADDR 套接字选项</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ssc-receive-buffer-size" type="xs:int" default="1024" minOccurs="0">
					<xs:annotation>
						<xs:documentation>为从此 ServerSocket 接受的套接字的 SO_RCVBUF 选项设置默认建议值</xs:documentation>
					</xs:annotation>
				</xs:element>
				-->
				<xs:element name="max-socket-size" type="xs:string" default="1000" minOccurs="0">
					<xs:annotation>
						<xs:documentation>[V]最大连接数</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="is-short-socket" type="xs:boolean" default="true" minOccurs="0">
					<xs:annotation>
						<xs:documentation>是否是短连接</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="io-worker-count" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>[V]执行socket的输入输出操作的个数=====
这个改为在“扩展属性中“描述，IDE不提供编辑输入框</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="transport-request-creator" type="xs:string">
					<xs:annotation>
						<xs:documentation>需要修改为只获取渠道服务码和渠道服务解包的数据，需要能够拿到渠道定义,
1、实现接口com.primeton.btp.api.transport.ITransportRequestCreator，
2、并继承自com.primeton.btp.spi.transport.tcp.AbstractTcpTransportRequestCreator类，
3、默认值 com.primeton.btp.spi.transport.tcp.TcpTransportRequestCreator</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="data-exchange-class" type="xs:string">
					<xs:annotation>
						<xs:documentation>数据交换类,用以从socket的输入流中读取合适的数据作为请求数据交由transport-handler处理并将处理结果写入socket的输出流。如从输入流读取数据时,先读取前3位表示将要接收的数据长度,然后读取真正的请求数据;向输出流写入时会在真正的返回数据前面加上3个字节表示输出数据的长度,实现接口com.primeton.btp.spi.transport.tcp.ITcpDataExchange，默认值com.primeton.btp.spi.transport.tcp.SimpleTcpDataExchange</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="transport-request-handler">
					<xs:annotation>
						<xs:documentation>渠道处理器,负责处理真正的业务数据请求，并返回处理结果,
1、factory-class实现接口com.primeton.btp.api.transport.ITransportRequestHandlerFactory；
2、并且需要继承com.primeton.btp.spi.transport.AbstractTransportRequestHandlerFactory；
3、默认值 com.primeton.btp.spi.transport.DefaultTransportRequestHandlerFactory</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:group ref="object-pool-group"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element ref="work-threads"/>
				<!--
				<xs:element ref="transport-after-received-interceptors" minOccurs="0"/>
				<xs:element ref="transport-before-send-interceptors" minOccurs="0"/>
				-->
				<xs:element name="work-threads-ref" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>[V]</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="ext-property" minOccurs="0"/>
				<xs:element name="ext-class" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>扩展实现类,
1、实现接口com.primeton.btp.api.transport.tcp.ITcpTransport
2、并且继承自com.primeton.btp.spi.transport.tcp.AbstractTcpTransport</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:all>
			<xs:attribute name="id" type="xs:string" use="required">
				<xs:annotation>
					<xs:documentation>渠道的唯一标识</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="transport-ftp">
		<xs:annotation>
			<xs:documentation>FTP渠道定义</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="name" type="xs:string">
					<xs:annotation>
						<xs:documentation>渠道名称</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="description" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>渠道描述</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="host" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>[V]主机名</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="port" type="xs:string">
					<xs:annotation>
						<xs:documentation>[V]端口号</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="accounts" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>帐户列表</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element name="user-name" type="xs:string">
								<xs:annotation>
									<xs:documentation>用户名称</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="password" type="xs:string" minOccurs="0">
								<xs:annotation>
									<xs:documentation>密码(3DES加密),格式如"{3DES}+密码"</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="root-dir" type="xs:string">
								<xs:annotation>
									<xs:documentation>[V]根目录</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="privilege" type="xs:string">
								<xs:annotation>
									<xs:documentation>文件目录的读写权限(RW,R,W)</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<!--
				<xs:element ref="transport-after-received-interceptors" minOccurs="0"/>
				-->
				<xs:element ref="ext-property" minOccurs="0"/>
				<xs:element name="ext-class" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>扩展实现类,
1、实现接口com.primeton.btp.api.transport.ftp.IFtpTransport
2、并且继承自com.primeton.btp.spi.transport.AbstractTransport</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="id" type="xs:string" use="required">
				<xs:annotation>
					<xs:documentation>渠道标识</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="transport-wtc">
		<xs:annotation>
			<xs:documentation>WTC渠道定义，WTC的EJB的jar名称需要和transport-id一致</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="name" type="xs:string">
					<xs:annotation>
						<xs:documentation>渠道名称</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="description" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>渠道描述</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="transport-request-creator" type="xs:string">
					<xs:annotation>
						<xs:documentation>需要修改为只获取渠道服务码和渠道服务解包的数据，需要能够拿到渠道定义，"service-field-id"会在ext-property中设置,
1、实现接口com.primeton.btp.api.transport.ITransportRequestCreator
2、并且继承自com.primeton.btp.spi.transport.AbstractTransportRequestCreator</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="transport-request-handler">
					<xs:annotation>
						<xs:documentation>渠道处理器,负责处理真正的业务数据请求，并返回处理结果,
1、factory-class实现接口com.primeton.btp.api.transport.ITransportRequestHandlerFactory
2、并且继承自com.primeton.btp.spi.transport.AbstractTransportRequestHandlerFactory</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:group ref="object-pool-group"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<!--
				<xs:element ref="transport-after-received-interceptors" minOccurs="0"/>
				<xs:element ref="transport-before-send-interceptors" minOccurs="0"/>
				-->
				<xs:element ref="ext-property" minOccurs="0"/>
				<xs:element name="ext-class" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>扩展实现类,
1、实现接口com.primeton.btp.api.transport.wtc.IWtcTransport
2、并且继承自com.primeton.btp.spi.transport.AbstractTransport</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:all>
			<xs:attribute name="id" type="xs:string" use="required">
				<xs:annotation>
					<xs:documentation>渠道标识</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="transport-custom">
		<xs:annotation>
			<xs:documentation>客户定制渠道</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="name" type="xs:string">
					<xs:annotation>
						<xs:documentation>渠道名称</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="description" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>渠道描述</xs:documentation>
					</xs:annotation>
				</xs:element>
				<!--
				<xs:element ref="transport-after-received-interceptors" minOccurs="0"/>
				<xs:element ref="transport-before-send-interceptors" minOccurs="0"/>
				-->
				<xs:element name="transport-request-handler">
					<xs:annotation>
						<xs:documentation>渠道处理器,负责处理真正的业务数据请求，并返回处理结果,
1、factory-class实现接口com.primeton.btp.api.transport.ITransportRequestHandlerFactory
2、并且继承自com.primeton.btp.spi.transport.AbstractTransportRequestHandlerFactory</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:group ref="object-pool-group"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element ref="ext-property" minOccurs="0"/>
				<xs:element name="ext-class" type="xs:string">
					<xs:annotation>
						<xs:documentation>扩展实现类,
1、实现接口com.primeton.btp.api.transport.ITransport
2、并且继承自com.primeton.btp.spi.transport.AbstractTransport</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:all>
			<xs:attribute name="id" type="xs:string" use="required">
				<xs:annotation>
					<xs:documentation>渠道标识</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
</xs:schema>
